start : top_declaration {top_declaration} EOF

top_declaration : {include} {TOKEN_STATIC variable_declaration} {function_definition}

function_definition : type TOKEN_IDENTIFIER TOKEN_LRB variable_declaration TOKEN_RRB TOKEN_LCB function_body TOKEN_RCB

variable_declaration : type TOKEN_IDENTIFIER TOKEN_SEMICOLON

function_body : {function_statement}

function_statement : {variable_declaration | if_else | while_loop | assignment}

if_else : TOKEN_IF TOKEN_LRB expression TOKEN_RRB TOKEN_LCB {function_statement} TOKEN_RCB [TOKEN_ELSE TOKEN_LCB {function_statement} TOKEN_RCB]

while_loop : TOKEN_WHILE TOKEN_LRB expression TOKEN_RRB TOKEN_LCB {function_statement} TOKEN_RCB

assignment : TOKEN_IDENTIFIER { TOKEN_ASSIGNMENT TOKEN_IDENTIFIER } TOKEN_ASSIGNMENT expression

expression : simple_expression [(TOKEN_EQUAL | TOKEN_LESSEQUAL | TOKEN_LESS | TOKEN_UNEQUAL | TOKEN_GREATER | TOKEN_GREATEREQUAL | TOKEN_AND | TOKEN_OR) simple_expression]

simple_expression : [TOKEN_MINUS] term {(TOKEN_PLUS | TOKEN_MINUS) term}

term : factor [(TOKEN_MULT | TOKEN_DIVIDE | TOKEN_PERCENT) factor]

factor : TOKEN_IDENTIFIER | TOKEN_CONSTINT | TOKEN_CONSTCHAR | (TOKEN_LRB expression TOKEN_RRB) | procedure_call

procedure_call: TOKEN_IDENTIFIER TOKEN_LRB {expression | (expression TOKEN_COMMA)} TOKEN_RRB

type : TOKEN_INT | TOKEN_CHAR | TOKEN_VOID